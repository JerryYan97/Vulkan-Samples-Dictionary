Use deferred rendering.

First App that uses the DearImGUI application template.
First App that needs to load a relatively large scene.

I may want to design a materialized input system.

Deploy enough point lights in the scene.
--- Ambient Occlusion only affects ambient light. I may don't need the point lights.

Step 1:
Render out Scene's Diffuse Color. (Basically works. Needs more debugging after setup ImGUI and Input Handler.)
In this step, we only need one pipeline (geo_vert.hlsl + geo_frag.hlsl)
Besides, I need to make the basic ImGui framework works. 

Step 2:
Add ImGUI on Top of it.

Step 3:
Switch between Diffuse Color and Normal Color

Step 4 ~:
Include SSAO.


I want to put two lighting types:
Ambient and Direct Lights.
The Direct Light needs a shadow pass:
I am thinking that we can use the RT feature to do the shadow pass to get rid of implementing BVH/AABB spatial accerleration structure.
https://www.willusher.io/graphics/2019/09/06/faster-shadow-rays-on-rtx/
Ray Trace Ambient Occlusion: https://intro-to-dxr.cwyman.org/presentations/IntroDXR_ShaderTutorial.pdf


Some references:
Frustrum Culling: https://learnopengl.com/Guest-Articles/2021/Scene/Frustum-Culling
SSAO Blog: https://ajweeks.com/blog/2019/05/11/SSAO/


Note that the texture coordinates of Vulkan are also increasing from left to right, top to down.

Note that large scene needs to set camera far plane far enough.

Maybe I can just refactor this example to a multi-render Algorithem Dear ImGUI based Vulkan Renderer.